/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  game?: GQLGame;
}

export interface GQLGame {
  id: string;
  state: GQLGameState;
  playerType1: GQLPlayerType;
  playerType2: GQLPlayerType;
  movesHistory: Array<GQLMove | null>;
}

export interface GQLGameState {
  stage: GQLGameStage;
  currentPlayer?: GQLPlayer;
  board: Array<Array<GQLFieldState | null> | null>;
  winner?: GQLPlayer;
}

export enum GQLGameStage {
  WAITING_FOR_PLAYERS = 'WAITING_FOR_PLAYERS',
  IN_PROGRESS = 'IN_PROGRESS',
  FINISHED = 'FINISHED'
}

export enum GQLPlayer {
  X = 'X',
  O = 'O'
}

export enum GQLFieldState {
  EMPTY = 'EMPTY',
  X = 'X',
  O = 'O'
}

export enum GQLPlayerType {
  HUMAN = 'HUMAN',
  BOT = 'BOT'
}

export interface GQLMove {
  player: GQLPlayer;
  positionX: number;
  positionY: number;
}

export interface GQLMutation {
  createGame?: GQLGame;
  joinGame?: GQLJoinGameResult;
  makeMove?: GQLGameState;
}

export interface GQLGameParameters {
  playerType1: GQLPlayerType;
  playerType2: GQLPlayerType;
}

export interface GQLJoinGameResult {
  player: GQLPlayer;
  token: string;
  game: GQLGame;
}

export interface GQLMakeMoveParameters {
  gameId: string;
  token: string;
  positionX: number;
  positionY: number;
}

export interface GQLSubscription {
  gameStateChanged?: GQLGameState;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Game?: GQLGameTypeResolver;
  GameState?: GQLGameStateTypeResolver;
  Move?: GQLMoveTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  JoinGameResult?: GQLJoinGameResultTypeResolver;
  Subscription?: GQLSubscriptionTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = undefined> {
  game?: QueryToGameResolver<TParent>;
}

export interface QueryToGameArgs {
  id: string;
}
export interface QueryToGameResolver<TParent = undefined, TResult = GQLGame | null> {
  (parent: TParent, args: QueryToGameArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLGameTypeResolver<TParent = GQLGame> {
  id?: GameToIdResolver<TParent>;
  state?: GameToStateResolver<TParent>;
  playerType1?: GameToPlayerType1Resolver<TParent>;
  playerType2?: GameToPlayerType2Resolver<TParent>;
  movesHistory?: GameToMovesHistoryResolver<TParent>;
}

export interface GameToIdResolver<TParent = GQLGame, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GameToStateResolver<TParent = GQLGame, TResult = GQLGameState> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GameToPlayerType1Resolver<TParent = GQLGame, TResult = GQLPlayerType> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GameToPlayerType2Resolver<TParent = GQLGame, TResult = GQLPlayerType> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GameToMovesHistoryResolver<TParent = GQLGame, TResult = Array<GQLMove | null>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLGameStateTypeResolver<TParent = GQLGameState> {
  stage?: GameStateToStageResolver<TParent>;
  currentPlayer?: GameStateToCurrentPlayerResolver<TParent>;
  board?: GameStateToBoardResolver<TParent>;
  winner?: GameStateToWinnerResolver<TParent>;
}

export interface GameStateToStageResolver<TParent = GQLGameState, TResult = GQLGameStage> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GameStateToCurrentPlayerResolver<TParent = GQLGameState, TResult = GQLPlayer | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GameStateToBoardResolver<TParent = GQLGameState, TResult = Array<Array<GQLFieldState | null> | null>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GameStateToWinnerResolver<TParent = GQLGameState, TResult = GQLPlayer | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLMoveTypeResolver<TParent = GQLMove> {
  player?: MoveToPlayerResolver<TParent>;
  positionX?: MoveToPositionXResolver<TParent>;
  positionY?: MoveToPositionYResolver<TParent>;
}

export interface MoveToPlayerResolver<TParent = GQLMove, TResult = GQLPlayer> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MoveToPositionXResolver<TParent = GQLMove, TResult = number> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MoveToPositionYResolver<TParent = GQLMove, TResult = number> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLMutationTypeResolver<TParent = undefined> {
  createGame?: MutationToCreateGameResolver<TParent>;
  joinGame?: MutationToJoinGameResolver<TParent>;
  makeMove?: MutationToMakeMoveResolver<TParent>;
}

export interface MutationToCreateGameArgs {
  parameters: GQLGameParameters;
}
export interface MutationToCreateGameResolver<TParent = undefined, TResult = GQLGame | null> {
  (parent: TParent, args: MutationToCreateGameArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToJoinGameArgs {
  gameId: string;
}
export interface MutationToJoinGameResolver<TParent = undefined, TResult = GQLJoinGameResult | null> {
  (parent: TParent, args: MutationToJoinGameArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToMakeMoveArgs {
  parameters: GQLMakeMoveParameters;
}
export interface MutationToMakeMoveResolver<TParent = undefined, TResult = GQLGameState | null> {
  (parent: TParent, args: MutationToMakeMoveArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLJoinGameResultTypeResolver<TParent = GQLJoinGameResult> {
  player?: JoinGameResultToPlayerResolver<TParent>;
  token?: JoinGameResultToTokenResolver<TParent>;
  game?: JoinGameResultToGameResolver<TParent>;
}

export interface JoinGameResultToPlayerResolver<TParent = GQLJoinGameResult, TResult = GQLPlayer> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface JoinGameResultToTokenResolver<TParent = GQLJoinGameResult, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface JoinGameResultToGameResolver<TParent = GQLJoinGameResult, TResult = GQLGame> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLSubscriptionTypeResolver<TParent = undefined> {
  gameStateChanged?: SubscriptionToGameStateChangedResolver<TParent>;
}

export interface SubscriptionToGameStateChangedArgs {
  id: string;
}
export interface SubscriptionToGameStateChangedResolver<TParent = undefined, TResult = GQLGameState | null> {
  resolve?: (parent: TParent, args: SubscriptionToGameStateChangedArgs, context: any, info: GraphQLResolveInfo) => Promise<TResult>;
  subscribe: (parent: TParent, args: SubscriptionToGameStateChangedArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}
